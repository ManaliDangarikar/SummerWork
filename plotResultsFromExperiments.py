# logged data from running "runExperiment_clean_fgsm_pgdm.py"
# calculates and plots errorbar for mean and std dev for clean, fgsm, pgdm for all values of epsilon 

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

fgsm_acc_1 = np.array([[0.97070003, 0.96920002, 0.96899998, 0.9659, 0.96630001, 0.95380002,
             0.94400001, 0.94419998, 0.96270001, 0.94279999, 0.92140001, 0.94660002,
             0.92339998, 0.8955, 0.86930001, 0.86699998, 0.74489999, 0.81739998,
             0.73540002, 0.5553, 0.20020001, 0.39919999, 0.32260001, 0.33410001,
             0.1135, 0.1135],
            [0.9738, 0.97259998, 0.97189999, 0.97189999, 0.9716, 0.97119999,
             0.96069998, 0.96130002, 0.96350002, 0.96149999, 0.94510001, 0.94889998,
             0.91170001, 0.94370002, 0.92909998, 0.87940001, 0.86799997, 0.86669999,
             0.75340003, 0.42919999, 0.45559999, 0.1223, 0.1135, 0.1135,
             0.1135, 0.17380001],
            [0.96899998, 0.96829998, 0.96740001, 0.97070003, 0.9612, 0.96200001,
             0.95389998, 0.94880003, 0.95179999, 0.94859999, 0.9483, 0.92879999,
             0.91780001, 0.91049999, 0.92729998, 0.88340002, 0.8075, 0.82990003,
             0.68199998, 0.59719998, 0.3114, 0.5079, 0.37220001, 0.1135,
             0.32089999, 0.18179999],
            [0.96069998, 0.9623, 0.95829999, 0.95969999, 0.94379997, 0.95310003,
             0.93839997, 0.92229998, 0.94330001, 0.94120002, 0.92909998, 0.91579998,
             0.92589998, 0.87779999, 0.85659999, 0.84380001, 0.83770001, 0.7651,
             0.6469, 0.67369998, 0.68580002, 0.24330001, 0.1648, 0.3942,
             0.152, 0.18529999],
            [0.97000003, 0.9716, 0.96679997, 0.96149999, 0.96609998, 0.96509999,
             0.97049999, 0.96319997, 0.96210003, 0.95130002, 0.9472, 0.8858,
             0.9436, 0.91369998, 0.9109, 0.8739, 0.85600001, 0.86769998,
             0.64920002, 0.49579999, 0.317, 0.64649999, 0.5126, 0.1135,
             0.3998, 0.118]])

pgdm_acc_1 = np.array([[0.96880001, 0.96780002, 0.9677, 0.96450001, 0.96619999, 0.95240003,
             0.9429, 0.94239998, 0.9619, 0.9418, 0.91960001, 0.94489998,
             0.92220002, 0.89310002, 0.86669999, 0.86440003, 0.73989999, 0.8136,
             0.73229998, 0.55010003, 0.1964, 0.39719999, 0.32190001, 0.33250001,
             0.1135, 0.1135],
            [0.97210002, 0.97119999, 0.97049999, 0.97100002, 0.97100002, 0.97039998,
             0.95920002, 0.9601, 0.96249998, 0.9605, 0.9443, 0.94840002,
             0.9102, 0.94300002, 0.92720002, 0.8775, 0.86750001, 0.86180001,
             0.75129998, 0.4244, 0.44819999, 0.1223, 0.1135, 0.1135,
             0.1135, 0.1734],
            [0.9673, 0.96740001, 0.96579999, 0.9691, 0.9601, 0.9605,
             0.95270002, 0.94770002, 0.95160002, 0.94760001, 0.94660002, 0.92699999,
             0.91750002, 0.90799999, 0.9253, 0.8822, 0.80430001, 0.8294,
             0.67820001, 0.59619999, 0.30689999, 0.5029, 0.3696, 0.1135,
             0.3195, 0.1794],
            [0.9562, 0.96020001, 0.95670003, 0.95789999, 0.9411, 0.95099998,
             0.93690002, 0.92119998, 0.94190001, 0.94059998, 0.92839998, 0.9145,
             0.92460001, 0.87629998, 0.85360003, 0.84130001, 0.83719999, 0.75929999,
             0.64499998, 0.66939998, 0.68199998, 0.241, 0.16339999, 0.3897,
             0.1514, 0.1841],
            [0.96810001, 0.96969998, 0.96569997, 0.96039999, 0.96499997, 0.96390003,
             0.96920002, 0.96139997, 0.96160001, 0.95060003, 0.94550002, 0.88410002,
             0.94270003, 0.91329998, 0.90990001, 0.87029999, 0.85320002, 0.8664,
             0.64410001, 0.48980001, 0.31189999, 0.64609998, 0.51069999, 0.1135,
             0.3978, 0.1176]])

clean_acc_1 = np.array([[0.98830003, 0.98729998, 0.98720002, 0.98460001, 0.98460001, 0.97979999,
              0.9752, 0.97299999, 0.9831, 0.97390002, 0.9623, 0.97100002,
              0.95779997, 0.94139999, 0.92019999, 0.91460001, 0.8028, 0.8743,
              0.7809, 0.59619999, 0.21179999, 0.4165, 0.3459, 0.3457,
              0.1135, 0.1135],
             [0.98930001, 0.98909998, 0.98750001, 0.98769999, 0.98839998, 0.9874,
              0.98320001, 0.98409998, 0.98250002, 0.98110002, 0.97369999, 0.97490001,
              0.94679999, 0.97460002, 0.95880002, 0.91729999, 0.91850001, 0.91670001,
              0.79220003, 0.4664, 0.49090001, 0.122, 0.1135, 0.1135,
              0.1135, 0.1789],
             [0.9878, 0.98710001, 0.98629999, 0.98729998, 0.98430002, 0.98439997,
              0.98199999, 0.97970003, 0.97930002, 0.9777, 0.97500002, 0.9691,
              0.95959997, 0.95029998, 0.96219999, 0.92799997, 0.86360002, 0.87809998,
              0.73119998, 0.64050001, 0.32690001, 0.53920001, 0.39089999, 0.1135,
              0.34020001, 0.193],
             [0.98329997, 0.98360002, 0.98110002, 0.98089999, 0.97799999, 0.97939998,
              0.97180003, 0.95990002, 0.97409999, 0.97250003, 0.96319997, 0.95859998,
              0.96079999, 0.92879999, 0.91430002, 0.90579998, 0.89660001, 0.82429999,
              0.69880003, 0.71560001, 0.73809999, 0.2509, 0.1666, 0.42039999,
              0.154, 0.1899],
             [0.98720002, 0.98729998, 0.98610002, 0.98379999, 0.98549998, 0.98619998,
              0.986, 0.9849, 0.98400003, 0.98079997, 0.97600001, 0.93000001,
              0.97460002, 0.95649999, 0.95389998, 0.9253, 0.8955, 0.91109997,
              0.71030003, 0.53070003, 0.32699999, 0.6886, 0.53289998, 0.1135,
              0.41409999, 0.1183]])


# Calculate the column-wise mean using np.mean with axis=0
fgsm_mean_1 = np.mean(fgsm_acc_1, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
fgsm_std_dev_1 = np.std(fgsm_acc_1, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
pgdm_mean_1 = np.mean(pgdm_acc_1, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
pgdm_std_dev_1 = np.std(pgdm_acc_1, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
clean_mean_1 = np.mean(clean_acc_1, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
clean_std_dev_1 = np.std(clean_acc_1, axis=0)

x = np.arange(start=0, stop=52, step=2)
print(x)
epsilon_1 = 0.0196078431372549
# Plot mean and standard deviation as error bars
#plt.errorbar(x, clean_mean_1, yerr=clean_std_dev_1, label='Clean')
#plt.errorbar(x, fgsm_mean_1, yerr=fgsm_std_dev_1, label='FGSM')
#plt.errorbar(x, pgdm_mean_1, yerr=pgdm_std_dev_1, label='PGDM')
#plt.title('Mean and Standard Deviation of Test Accuracy (epsilon = {:.4f})'.format(epsilon_1))
#plt.xlabel('Percentage of Weights modified')
#plt.ylabel('Accuracy')
#plt.grid(True)
#plt.legend()
#plt.show()

#######################

fgsm_acc_2 = np.array([[0.94349998, 0.94389999, 0.93669999, 0.93529999, 0.9436, 0.94260001,
                    0.92460001, 0.93239999, 0.92220002, 0.91890001, 0.9034, 0.9138,
                    0.8998, 0.92000002, 0.86299998, 0.80970001, 0.85000002, 0.77710003,
                    0.8193, 0.52069998, 0.61690003, 0.1904, 0.146, 0.2036,
                    0.28889999, 0.3565],
                   [0.94929999, 0.94999999, 0.94569999, 0.94450003, 0.94669998, 0.93889999,
                    0.93650001, 0.93760002, 0.92799997, 0.91060001, 0.92299998, 0.9059,
                    0.91259998, 0.88630003, 0.79149997, 0.77319998, 0.78960001, 0.67119998,
                    0.43259999, 0.43970001, 0.32800001, 0.39469999, 0.1147, 0.1135,
                    0.1135, 0.2377],
                   [0.9436, 0.94770002, 0.94019997, 0.94630003, 0.9375, 0.93900001,
                    0.92930001, 0.93709999, 0.93949997, 0.92659998, 0.926, 0.91350001,
                    0.91109997, 0.90530002, 0.8215, 0.87300003, 0.82410002, 0.74089998,
                    0.69999999, 0.7737, 0.5499, 0.4804, 0.29710001, 0.1311,
                    0.1196, 0.1135],
                   [0.9454, 0.94620001, 0.93970001, 0.94309998, 0.94739997, 0.94069999,
                    0.9174, 0.92460001, 0.93400002, 0.9174, 0.90429997, 0.91390002,
                    0.89389998, 0.87019998, 0.83899999, 0.82139999, 0.76719999, 0.56470001,
                    0.66850001, 0.41569999, 0.3858, 0.31920001, 0.1142, 0.1135,
                    0.1135, 0.30140001],
                   [0.94809997, 0.94739997, 0.94569999, 0.94739997, 0.94150001, 0.93300003,
                    0.9418, 0.92650002, 0.93220001, 0.92309999, 0.92729998, 0.91549999,
                    0.9192, 0.83429998, 0.8768, 0.8635, 0.84719998, 0.8822,
                    0.74400002, 0.61449999, 0.62470001, 0.13249999, 0.2586, 0.41319999,
                    0.1135, 0.1135]])

pgdm_acc_2 = np.array([[0.93629998, 0.93769997, 0.93150002, 0.92940003, 0.93879998, 0.93709999,
                    0.9181, 0.92820001, 0.91820002, 0.91360003, 0.8987, 0.91100001,
                    0.8944, 0.91369998, 0.85879999, 0.80199999, 0.8477, 0.77310002,
                    0.81169999, 0.50520003, 0.60610002, 0.18189999, 0.1424, 0.1979,
                    0.28009999, 0.35120001],
                   [0.94230002, 0.9454, 0.94, 0.93949997, 0.9418, 0.9346,
                    0.93150002, 0.93349999, 0.92369998, 0.90560001, 0.9174, 0.9016,
                    0.90969998, 0.88309997, 0.7845, 0.76429999, 0.78619999, 0.65899998,
                    0.40709999, 0.4269, 0.3177, 0.38209999, 0.1144, 0.1135,
                    0.1135, 0.2358],
                   [0.93489999, 0.94309998, 0.93589997, 0.94010001, 0.9314, 0.93229997,
                    0.92339998, 0.93269998, 0.93409997, 0.92500001, 0.9224, 0.90869999,
                    0.90539998, 0.90130001, 0.81129998, 0.86739999, 0.81879997, 0.73509997,
                    0.69330001, 0.76749998, 0.5388, 0.4698, 0.28999999, 0.12909999,
                    0.119, 0.1135],
                   [0.94160002, 0.94270003, 0.93510002, 0.94120002, 0.94370002, 0.9386,
                    0.9113, 0.92030001, 0.93019998, 0.9138, 0.90200001, 0.91109997,
                    0.88929999, 0.8678, 0.83359998, 0.81419998, 0.76029998, 0.54820001,
                    0.65810001, 0.4032, 0.37850001, 0.31029999, 0.1141, 0.1135,
                    0.1135, 0.29899999],
                   [0.94260001, 0.94309998, 0.93970001, 0.94330001, 0.93629998, 0.92860001,
                    0.93839997, 0.9206, 0.9285, 0.91909999, 0.92150003, 0.91039997,
                    0.9163, 0.82779998, 0.87040001, 0.8549, 0.83929998, 0.87989998,
                    0.73100001, 0.59640002, 0.6146, 0.13, 0.2482, 0.39989999,
                    0.1135, 0.1135]])

clean_acc_2 = np.array([[0.98879999, 0.98830003, 0.98689997, 0.98640001, 0.98710001, 0.9867,
                    0.98250002, 0.98290002, 0.98000002, 0.97979999, 0.97079998, 0.97390002,
                    0.96799999, 0.96950001, 0.94139999, 0.89209998, 0.92610002, 0.85180002,
                    0.90289998, 0.58160001, 0.70039999, 0.2025, 0.1476, 0.2124,
                    0.31369999, 0.3739],
                   [0.98940003, 0.98860002, 0.98769999, 0.98839998, 0.98720002, 0.98549998,
                    0.98500001, 0.98390001, 0.9813, 0.97509998, 0.9777, 0.96799999,
                    0.9716, 0.9551, 0.8757, 0.86180001, 0.87840003, 0.75410002,
                    0.4876, 0.49689999, 0.37200001, 0.4515, 0.1163, 0.1135,
                    0.1135, 0.24439999],
                   [0.98809999, 0.98830003, 0.98659998, 0.98839998, 0.98720002, 0.98760003,
                    0.98079997, 0.9853, 0.98339999, 0.98159999, 0.98140001, 0.9774,
                    0.9745, 0.96939999, 0.9278, 0.94999999, 0.91289997, 0.80580002,
                    0.78280002, 0.87110001, 0.61879998, 0.53310001, 0.3229, 0.132,
                    0.1237, 0.1135],
                   [0.98790002, 0.98729998, 0.98549998, 0.98699999, 0.98640001, 0.98470002,
                    0.97350001, 0.98070002, 0.98189998, 0.97460002, 0.97070003, 0.97219998,
                    0.95969999, 0.9418, 0.93599999, 0.90560001, 0.85689998, 0.65079999,
                    0.74900001, 0.46399999, 0.4226, 0.35879999, 0.1142, 0.1135,
                    0.1135, 0.33019999],
                   [0.98940003, 0.98940003, 0.98799998, 0.98890001, 0.98799998, 0.98619998,
                    0.98650002, 0.98640001, 0.98449999, 0.98250002, 0.98009998, 0.9777,
                    0.9727, 0.93379998, 0.95450002, 0.94349998, 0.93449998, 0.94499999,
                    0.83990002, 0.67989999, 0.69529998, 0.1355, 0.27680001, 0.44569999,
                    0.1135, 0.1135]])

# Calculate the column-wise mean using np.mean with axis=0
fgsm_mean_2 = np.mean(fgsm_acc_2, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
fgsm_std_dev_2 = np.std(fgsm_acc_2, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
pgdm_mean_2 = np.mean(pgdm_acc_2, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
pgdm_std_dev_2 = np.std(pgdm_acc_2, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
clean_mean_2 = np.mean(clean_acc_2, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
clean_std_dev_2 = np.std(clean_acc_2, axis=0)

x = np.arange(start=0, stop=52, step=2)
print(x)
epsilon_2 = 0.03137254901960784
# Plot mean and standard deviation as error bars
#plt.errorbar(x, clean_mean_2, yerr=clean_std_dev_2, label='Clean')
#plt.errorbar(x, fgsm_mean_2, yerr=fgsm_std_dev_2, label='FGSM')
#plt.errorbar(x, pgdm_mean_2, yerr=pgdm_std_dev_2, label='PGDM')
#plt.title('Mean and Standard Deviation of Test Accuracy (epsilon = {:.4f})'.format(epsilon_2))
#plt.xlabel('Percentage of Weights modified')
#plt.ylabel('Accuracy')
#plt.grid(True)
#plt.legend()
#plt.show()

#######################

fgsm_acc_3 = np.array([[0.88520002, 0.88249999, 0.88590002, 0.87840003, 0.88120002, 0.87779999,
                   0.8732, 0.87580001, 0.87309998, 0.86720002, 0.85540003, 0.83660001,
                   0.8348, 0.8283, 0.7999, 0.82419997, 0.73400003, 0.713,
                   0.65420002, 0.41499999, 0.66000003, 0.16060001, 0.39070001, 0.1979,
                   0.1135, 0.1135],
                  [0.88050002, 0.87510002, 0.88139999, 0.87400001, 0.88349998, 0.88239998,
                   0.87819999, 0.86930001, 0.87470001, 0.86510003, 0.84439999, 0.86879998,
                   0.88260001, 0.84549999, 0.83969998, 0.7748, 0.8136, 0.67900002,
                   0.65259999, 0.50340003, 0.43489999, 0.3682, 0.2586, 0.1135,
                   0.1469, 0.1135],
                  [0.83929998, 0.83929998, 0.82550001, 0.84450001, 0.84310001, 0.8319,
                   0.80970001, 0.79070002, 0.8096, 0.82499999, 0.80779999, 0.80040002,
                   0.84100002, 0.78740001, 0.7087, 0.74330002, 0.64960003, 0.69639999,
                   0.68910003, 0.59329998, 0.2999, 0.4368, 0.30739999, 0.1551,
                   0.1147, 0.1141],
                  [0.87989998, 0.87459999, 0.88660002, 0.86680001, 0.87910002, 0.86809999,
                   0.85900003, 0.87290001, 0.86119998, 0.84359998, 0.83270001, 0.83829999,
                   0.84969997, 0.80400002, 0.77600002, 0.79860002, 0.77240002, 0.6767,
                   0.67040002, 0.4684, 0.38100001, 0.51200002, 0.1681, 0.46610001,
                   0.29089999, 0.257],
                  [0.88599998, 0.88510001, 0.8804, 0.86900002, 0.88590002, 0.88340002,
                   0.85979998, 0.88870001, 0.87459999, 0.87269998, 0.86839998, 0.82059997,
                   0.8204, 0.83579999, 0.85339999, 0.72250003, 0.7845, 0.75870001,
                   0.57090002, 0.57990003, 0.33840001, 0.226, 0.46200001, 0.1621,
                   0.1135, 0.1029]])

pgdm_acc_3 = np.array([[0.85790002, 0.85939997, 0.86559999, 0.85689998, 0.86430001, 0.86080003,
                   0.85790002, 0.85879999, 0.85879999, 0.85049999, 0.83579999, 0.82099998,
                   0.81760001, 0.81830001, 0.7816, 0.80699998, 0.70649999, 0.68699998,
                   0.63190001, 0.3775, 0.63459998, 0.15360001, 0.37970001, 0.18960001,
                   0.1135, 0.1135],
                  [0.84750003, 0.8466, 0.85610002, 0.84560001, 0.86540002, 0.86189997,
                   0.8527, 0.84039998, 0.85350001, 0.84829998, 0.8272, 0.85110003,
                   0.87279999, 0.82300001, 0.829, 0.75389999, 0.7942, 0.64679998,
                   0.61570001, 0.48019999, 0.41119999, 0.35190001, 0.24680001, 0.1135,
                   0.14219999, 0.1135],
                  [0.80309999, 0.80599999, 0.79460001, 0.81739998, 0.81709999, 0.80610001,
                   0.7852, 0.75269997, 0.78820002, 0.80019999, 0.7899, 0.78310001,
                   0.8265, 0.7633, 0.68409997, 0.7166, 0.62639999, 0.67900002,
                   0.67210001, 0.57450002, 0.28459999, 0.42559999, 0.2949, 0.1472,
                   0.114, 0.1136],
                  [0.85409999, 0.85470003, 0.86790001, 0.84680003, 0.8635, 0.85280001,
                   0.8434, 0.85869998, 0.84640002, 0.82660002, 0.82029998, 0.82200003,
                   0.84039998, 0.78869998, 0.75870001, 0.78469998, 0.75559998, 0.64990002,
                   0.64200002, 0.44549999, 0.35100001, 0.5025, 0.15459999, 0.4474,
                   0.28330001, 0.25260001],
                  [0.86180001, 0.86629999, 0.8592, 0.85070002, 0.86629999, 0.8653,
                   0.84359998, 0.87440002, 0.86000001, 0.85759997, 0.8567, 0.80830002,
                   0.81, 0.82230002, 0.84170002, 0.70389998, 0.76789999, 0.74409997,
                   0.54970002, 0.55409998, 0.30419999, 0.2043, 0.45640001, 0.1587,
                   0.1135, 0.1013]])

clean_acc_3 = np.array([[0.9903, 0.98940003, 0.98940003, 0.98710001, 0.98680001, 0.98689997,
                   0.98570001, 0.98549998, 0.98119998, 0.98140001, 0.97689998, 0.97359997,
                   0.972, 0.97140002, 0.93690002, 0.9612, 0.87129998, 0.84909999,
                   0.79290003, 0.49959999, 0.77139997, 0.1674, 0.47920001, 0.2323,
                   0.1135, 0.1135],
                  [0.98940003, 0.98820001, 0.98909998, 0.98890001, 0.98760003, 0.98769999,
                   0.98729998, 0.98589998, 0.98369998, 0.98180002, 0.97469997, 0.97820002,
                   0.97850001, 0.9698, 0.9641, 0.92650002, 0.94129997, 0.83789998,
                   0.77999997, 0.60949999, 0.52560002, 0.40490001, 0.2683, 0.1135,
                   0.1584, 0.1135],
                  [0.98320001, 0.98259997, 0.98019999, 0.98280001, 0.98030001, 0.98269999,
                   0.97570002, 0.97490001, 0.96780002, 0.97250003, 0.96350002, 0.96259999,
                   0.96950001, 0.95120001, 0.89719999, 0.91530001, 0.86140001, 0.84350002,
                   0.82489997, 0.74970001, 0.37270001, 0.5237, 0.35339999, 0.1636,
                   0.1143, 0.114],
                  [0.98900002, 0.9874, 0.9878, 0.98650002, 0.98629999, 0.98570001,
                   0.9817, 0.9835, 0.98150003, 0.97539997, 0.97329998, 0.96710002,
                   0.97289997, 0.95029998, 0.93910003, 0.94809997, 0.9149, 0.81660002,
                   0.8168, 0.55360001, 0.46419999, 0.61159998, 0.1812, 0.54629999,
                   0.32530001, 0.29750001],
                  [0.9885, 0.98809999, 0.98559999, 0.98509997, 0.98769999, 0.98519999,
                   0.98430002, 0.9853, 0.98290002, 0.98229998, 0.98040003, 0.95569998,
                   0.95179999, 0.96329999, 0.972, 0.90920001, 0.94480002, 0.8987,
                   0.67790002, 0.72140002, 0.42269999, 0.2499, 0.52139997, 0.1815,
                   0.1135, 0.1025]])

# Calculate the column-wise mean using np.mean with axis=0
fgsm_mean_3 = np.mean(fgsm_acc_3, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
fgsm_std_dev_3 = np.std(fgsm_acc_3, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
pgdm_mean_3 = np.mean(pgdm_acc_3, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
pgdm_std_dev_3 = np.std(pgdm_acc_3, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
clean_mean_3 = np.mean(clean_acc_3, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
clean_std_dev_3 = np.std(clean_acc_3, axis=0)

x = np.arange(start=0, stop=52, step=2)
print(x)
epsilon_3 = 0.050980392156862744
# Plot mean and standard deviation as error bars
#plt.errorbar(x, clean_mean_3, yerr=clean_std_dev_3, label='Clean')
#plt.errorbar(x, fgsm_mean_3, yerr=fgsm_std_dev_3, label='FGSM')
#plt.errorbar(x, pgdm_mean_3, yerr=pgdm_std_dev_3, label='PGDM')
#plt.title('Mean and Standard Deviation of Test Accuracy (epsilon = {:.4f})'.format(epsilon_3))
#plt.xlabel('Percentage of Weights modified')
#plt.ylabel('Accuracy')
#plt.grid(True)
#plt.legend()
#plt.show()

#######################

fgsm_acc_4 = np.array([[0.6602, 0.66850001, 0.66659999, 0.66100001, 0.68120003, 0.66659999,
                   0.68900001, 0.68279999, 0.68980002, 0.68839997, 0.69950002, 0.69580001,
                   0.68150002, 0.69620001, 0.63940001, 0.67439997, 0.61979997, 0.53979999,
                   0.64579999, 0.58420002, 0.31330001, 0.5133, 0.14839999, 0.1185,
                   0.1124, 0.1135],
                  [0.6577, 0.6717, 0.66530001, 0.67250001, 0.68480003, 0.67030001,
                   0.67830002, 0.66909999, 0.68239999, 0.72829998, 0.69599998, 0.6728,
                   0.69319999, 0.66100001, 0.6512, 0.67580003, 0.52100003, 0.59390002,
                   0.50470001, 0.48089999, 0.2904, 0.3863, 0.1349, 0.1215,
                   0.1135, 0.1135],
                  [0.6541, 0.6469, 0.65259999, 0.64490002, 0.64859998, 0.67909998,
                   0.67640001, 0.66210002, 0.64899999, 0.662, 0.6742, 0.64170003,
                   0.65210003, 0.64399999, 0.62840003, 0.6476, 0.60170001, 0.65280002,
                   0.59140003, 0.48140001, 0.2942, 0.25889999, 0.18709999, 0.1145,
                   0.101, 0.2207],
                  [0.71090001, 0.71829998, 0.71139997, 0.72780001, 0.70480001, 0.68900001,
                   0.71249998, 0.71399999, 0.73540002, 0.7166, 0.74000001, 0.69319999,
                   0.71310002, 0.72890002, 0.72170001, 0.7313, 0.5905, 0.63260001,
                   0.63489997, 0.48480001, 0.2316, 0.50099999, 0.4003, 0.29530001,
                   0.1135, 0.1135],
                  [0.68720001, 0.68519998, 0.69520003, 0.70230001, 0.68409997, 0.6925,
                   0.68449998, 0.69520003, 0.69300002, 0.6681, 0.68760002, 0.64539999,
                   0.58899999, 0.6602, 0.59020001, 0.68669999, 0.63789999, 0.50419998,
                   0.54439998, 0.57480001, 0.47839999, 0.2696, 0.24959999, 0.1135,
                   0.1135, 0.1135]])

pgdm_acc_4 = np.array([[0.49970001, 0.52310002, 0.52670002, 0.52209997, 0.55089998, 0.52789998,
                   0.55580002, 0.55449998, 0.5693, 0.59509999, 0.59009999, 0.59320003,
                   0.5844, 0.60140002, 0.54000002, 0.60530001, 0.523, 0.46700001,
                   0.58329999, 0.49169999, 0.236, 0.44100001, 0.1321, 0.1139,
                   0.1152, 0.1135],
                  [0.52310002, 0.55620003, 0.55150002, 0.55949998, 0.57620001, 0.57450002,
                   0.57160002, 0.57200003, 0.58759999, 0.65499997, 0.61129999, 0.59869999,
                   0.616, 0.57380003, 0.56950003, 0.60290003, 0.41929999, 0.54470003,
                   0.4513, 0.4127, 0.245, 0.35859999, 0.1244, 0.117,
                   0.1135, 0.1135],
                  [0.51389998, 0.51889998, 0.52029997, 0.53259999, 0.52929997, 0.56489998,
                   0.56519997, 0.56209999, 0.53609997, 0.56129998, 0.58600003, 0.53820002,
                   0.53850001, 0.52160001, 0.51770002, 0.59530002, 0.50749999, 0.5844,
                   0.53060001, 0.42219999, 0.2388, 0.20290001, 0.1672, 0.1139,
                   0.0999, 0.20559999],
                  [0.5499, 0.57620001, 0.55930001, 0.61250001, 0.56349999, 0.53850001,
                   0.5812, 0.58179998, 0.64179999, 0.59320003, 0.65469998, 0.58960003,
                   0.62290001, 0.65140003, 0.63919997, 0.63069999, 0.47909999, 0.54860002,
                   0.56239998, 0.40239999, 0.17380001, 0.45070001, 0.35730001, 0.26719999,
                   0.1135, 0.1135],
                  [0.56489998, 0.56800002, 0.59399998, 0.602, 0.58850002, 0.59689999,
                   0.58719999, 0.6085, 0.60650003, 0.57050002, 0.60500002, 0.57389998,
                   0.50239998, 0.58749998, 0.50199997, 0.64649999, 0.58270001, 0.43869999,
                   0.48140001, 0.50580001, 0.43329999, 0.2334, 0.2343, 0.1135,
                   0.1135, 0.1135]])

clean_acc_4 = np.array([[0.98879999, 0.98900002, 0.98879999, 0.9878, 0.98809999, 0.98799998,
                   0.98699999, 0.98570001, 0.98479998, 0.98299998, 0.98390001, 0.98140001,
                   0.97839999, 0.97479999, 0.95060003, 0.94099998, 0.92989999, 0.84200001,
                   0.88880002, 0.86909997, 0.4181, 0.74049997, 0.1719, 0.1179,
                   0.1376, 0.1135],
                  [0.98909998, 0.98890001, 0.98750001, 0.98890001, 0.98830003, 0.98720002,
                   0.986, 0.98509997, 0.98610002, 0.98479998, 0.97939998, 0.96920002,
                   0.97369999, 0.96929997, 0.95160002, 0.95910001, 0.81099999, 0.89840001,
                   0.68980002, 0.73210001, 0.3917, 0.54409999, 0.14219999, 0.1199,
                   0.1135, 0.1135],
                  [0.98699999, 0.98549998, 0.98750001, 0.98659998, 0.98580003, 0.98549998,
                   0.98430002, 0.98030001, 0.98409998, 0.9774, 0.97549999, 0.97140002,
                   0.97000003, 0.97549999, 0.95230001, 0.8926, 0.91839999, 0.91869998,
                   0.84960002, 0.67079997, 0.3854, 0.33790001, 0.2271, 0.1149,
                   0.1063, 0.27180001],
                  [0.98930001, 0.98979998, 0.98790002, 0.98750001, 0.98680001, 0.98619998,
                   0.98710001, 0.98439997, 0.98479998, 0.98299998, 0.98430002, 0.98150003,
                   0.97530001, 0.97750002, 0.96469998, 0.97619998, 0.8858, 0.88090003,
                   0.90039998, 0.75160003, 0.29550001, 0.68229997, 0.5291, 0.36379999,
                   0.1135, 0.1135],
                  [0.98629999, 0.98610002, 0.98589998, 0.98400003, 0.98519999, 0.98509997,
                   0.98100001, 0.98229998, 0.98019999, 0.97710001, 0.97439998, 0.95520002,
                   0.95120001, 0.9659, 0.92699999, 0.94129997, 0.93610001, 0.7755,
                   0.8272, 0.87159997, 0.72299999, 0.3529, 0.27700001, 0.1135,
                   0.1135, 0.1135]])

# Calculate the column-wise mean using np.mean with axis=0
fgsm_mean_4 = np.mean(fgsm_acc_4, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
fgsm_std_dev_4 = np.std(fgsm_acc_4, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
pgdm_mean_4 = np.mean(pgdm_acc_4, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
pgdm_std_dev_4 = np.std(pgdm_acc_4, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
clean_mean_4 = np.mean(clean_acc_4, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
clean_std_dev_4 = np.std(clean_acc_4, axis=0)

x = np.arange(start=0, stop=52, step=2)
print(x)
epsilon_4 = 0.08235294117647059
# Plot mean and standard deviation as error bars
#plt.errorbar(x, clean_mean_4, yerr=clean_std_dev_4, label='Clean')
#plt.errorbar(x, fgsm_mean_4, yerr=fgsm_std_dev_4, label='FGSM')
#plt.errorbar(x, pgdm_mean_4, yerr=pgdm_std_dev_4, label='PGDM')
#plt.title('Mean and Standard Deviation of Test Accuracy (epsilon = {:.4f})'.format(epsilon_4))
#plt.xlabel('Percentage of Weights modified')
#plt.ylabel('Accuracy')
#plt.grid(True)
#plt.legend()
#plt.show()

#######################

fgsm_acc_5 = np.array([[0.34400001, 0.3425, 0.35339999, 0.35690001, 0.33180001, 0.3511,
                   0.3662, 0.35980001, 0.3594, 0.32699999, 0.4021, 0.35139999,
                   0.32449999, 0.36269999, 0.34869999, 0.45879999, 0.34299999,
                   0.3628, 0.3211, 0.34509999, 0.3145, 0.2084, 0.2286,
                   0.25639999, 0.1397, 0.1815],
                  [0.42559999, 0.4294, 0.4285, 0.44319999, 0.43000001, 0.43830001,
                   0.4404, 0.44589999, 0.43380001, 0.42050001, 0.43489999, 0.40059999,
                   0.44679999, 0.4533, 0.45300001, 0.4251, 0.42649999, 0.44240001,
                   0.32069999, 0.33680001, 0.31290001, 0.25040001, 0.1202, 0.1135,
                   0.2075, 0.19220001],
                  [0.40079999, 0.3937, 0.39489999, 0.396, 0.40580001, 0.41760001,
                   0.3888, 0.41819999, 0.41999999, 0.43059999, 0.39480001, 0.4896,
                   0.40740001, 0.50010002, 0.37990001, 0.4217, 0.42050001, 0.42559999,
                   0.41249999, 0.42089999, 0.2446, 0.24259999, 0.1362, 0.1135,
                   0.1472, 0.2106],
                  [0.41229999, 0.4021, 0.4048, 0.40740001, 0.41319999, 0.4215,
                   0.42899999, 0.43149999, 0.41710001, 0.40459999, 0.45930001, 0.41850001,
                   0.4445, 0.43279999, 0.45820001, 0.36860001, 0.4048, 0.44069999,
                   0.42750001, 0.33829999, 0.3267, 0.25330001, 0.25650001, 0.27900001,
                   0.1135, 0.1903],
                  [0.36059999, 0.3662, 0.38069999, 0.37310001, 0.37259999, 0.382,
                   0.39480001, 0.40200001, 0.41170001, 0.35139999, 0.34729999, 0.39680001,
                   0.3761, 0.412, 0.44929999, 0.40720001, 0.4237, 0.39539999,
                   0.43079999, 0.44, 0.1777, 0.31889999, 0.28389999, 0.1135,
                   0.1135, 0.1067]])

pgdm_acc_5 = np.array([[0.1144, 0.12729999, 0.1256, 0.14740001, 0.1329, 0.1407,
                   0.14659999, 0.16670001, 0.1793, 0.1472, 0.19220001, 0.1672,
                   0.1529, 0.1956, 0.1718, 0.2784, 0.2022, 0.198,
                   0.2164, 0.28310001, 0.23119999, 0.1485, 0.2096, 0.2183,
                   0.12710001, 0.1498],
                  [0.1471, 0.15710001, 0.1652, 0.1728, 0.1697, 0.18170001,
                   0.18719999, 0.2022, 0.19589999, 0.19419999, 0.1956, 0.1848,
                   0.2472, 0.2359, 0.25409999, 0.28690001, 0.2911, 0.31209999,
                   0.22, 0.24879999, 0.19939999, 0.2008, 0.1141, 0.1135,
                   0.1613, 0.17380001],
                  [0.13869999, 0.1485, 0.1453, 0.1653, 0.1672, 0.18179999,
                   0.1763, 0.1928, 0.18790001, 0.1696, 0.1857, 0.2748,
                   0.2129, 0.3193, 0.1777, 0.2647, 0.2782, 0.228,
                   0.292, 0.3035, 0.16680001, 0.1802, 0.1165, 0.1135,
                   0.12899999, 0.1952],
                  [0.148, 0.15530001, 0.1744, 0.16500001, 0.1693, 0.1978,
                   0.1902, 0.18279999, 0.2017, 0.1701, 0.2287, 0.19419999,
                   0.241, 0.2176, 0.2351, 0.1912, 0.2212, 0.27200001,
                   0.2895, 0.2212, 0.20919999, 0.16500001, 0.1733, 0.21080001,
                   0.1135, 0.1532],
                  [0.1522, 0.1621, 0.1812, 0.1715, 0.1714, 0.17990001,
                   0.19149999, 0.18089999, 0.2159, 0.18449999, 0.2098, 0.2331,
                   0.22849999, 0.23280001, 0.26949999, 0.27700001, 0.27079999, 0.27829999,
                   0.32570001, 0.34819999, 0.1287, 0.26140001, 0.2265, 0.1135,
                   0.1135, 0.1033]])

clean_acc_5 = np.array([[0.98809999, 0.98769999, 0.98750001, 0.98760003, 0.9853, 0.9842,
                   0.9817, 0.98519999, 0.97960001, 0.9774, 0.97140002, 0.96600002,
                   0.96149999, 0.94840002, 0.93150002, 0.95410001, 0.88020003, 0.89810002,
                   0.73790002, 0.60329998, 0.65240002, 0.3425, 0.43009999, 0.40220001,
                   0.18170001, 0.2396],
                  [0.99000001, 0.98979998, 0.98909998, 0.98970002, 0.98860002, 0.98559999,
                   0.98799998, 0.98470002, 0.9842, 0.98280001, 0.9835, 0.9619,
                   0.9447, 0.96420002, 0.95700002, 0.8951, 0.89740002, 0.81950003,
                   0.75599998, 0.5941, 0.66299999, 0.51990002, 0.13079999, 0.1135,
                   0.27309999, 0.22499999],
                  [0.98930001, 0.98930001, 0.98839998, 0.98659998, 0.98589998, 0.98460001,
                   0.98559999, 0.98439997, 0.98019999, 0.98290002, 0.97839999, 0.97570002,
                   0.96030003, 0.96420002, 0.94410002, 0.87769997, 0.88730001, 0.91589999,
                   0.80779999, 0.8452, 0.40130001, 0.40000001, 0.1424, 0.1135,
                   0.21439999, 0.34],
                  [0.98760003, 0.98710001, 0.98650002, 0.98559999, 0.98619998, 0.98329997,
                   0.98640001, 0.9842, 0.98150003, 0.9774, 0.98110002, 0.9716,
                   0.96390003, 0.97000003, 0.96560001, 0.861, 0.93830001, 0.9145,
                   0.7841, 0.63700002, 0.64469999, 0.48679999, 0.52340001, 0.47260001,
                   0.1135, 0.3515],
                  [0.98860002, 0.98820001, 0.98869997, 0.98809999, 0.9842, 0.98189998,
                   0.9849, 0.98409998, 0.98079997, 0.9745, 0.96749997, 0.96079999,
                   0.94809997, 0.96380001, 0.96259999, 0.90109998, 0.91469997, 0.91939998,
                   0.80220002, 0.80589998, 0.25600001, 0.4754, 0.495, 0.1135,
                   0.1135, 0.1072]])

# Calculate the column-wise mean using np.mean with axis=0
fgsm_mean_5 = np.mean(fgsm_acc_5, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
fgsm_std_dev_5 = np.std(fgsm_acc_5, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
pgdm_mean_5 = np.mean(pgdm_acc_5, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
pgdm_std_dev_5 = np.std(pgdm_acc_5, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
clean_mean_5 = np.mean(clean_acc_5, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
clean_std_dev_5 = np.std(clean_acc_5, axis=0)

x = np.arange(start=0, stop=52, step=2)
print(x)
epsilon_5 = 0.13333333333333333
# Plot mean and standard deviation as error bars
#plt.errorbar(x, clean_mean_5, yerr=clean_std_dev_5, label='Clean')
#plt.errorbar(x, fgsm_mean_5, yerr=fgsm_std_dev_5, label='FGSM')
#plt.errorbar(x, pgdm_mean_5, yerr=pgdm_std_dev_5, label='PGDM')
#plt.title('Mean and Standard Deviation of Test Accuracy (epsilon = {:.4f})'.format(epsilon_5))
#plt.xlabel('Percentage of Weights modified')
#plt.ylabel('Accuracy')
#plt.grid(True)
#plt.legend()
#plt.show()

#######################

fgsm_acc_6 = np.array([[0.1874, 0.18539999, 0.1937, 0.1865, 0.19320001, 0.1865, 0.1944, 0.1961, 0.1978, 0.1926, 0.20110001, 0.20110001, 0.2045, 0.2378, 0.2049, 0.21520001, 0.19140001, 0.2113, 0.25139999, 0.21160001, 0.20999999, 0.21080001, 0.12970001, 0.18089999, 0.1135, 0.1135],
                   [0.184, 0.18610001, 0.18269999, 0.1816, 0.18269999, 0.1877, 0.1893, 0.2022, 0.1881, 0.191, 0.1714, 0.1763, 0.1717, 0.18000001, 0.20110001, 0.1758, 0.2096, 0.23270001, 0.20829999, 0.2471, 0.177, 0.2035, 0.1408, 0.163, 0.1135, 0.156],
                   [0.19769999, 0.2, 0.2061, 0.2049, 0.21439999, 0.1901, 0.2071, 0.2042, 0.227, 0.21080001, 0.20389999, 0.2141, 0.24339999, 0.2342, 0.25870001, 0.28349999, 0.1715, 0.26199999, 0.30379999, 0.2454, 0.22660001, 0.1785, 0.2006, 0.1221, 0.1135, 0.15279999],
                   [0.1825, 0.1804, 0.1847, 0.18960001, 0.18880001, 0.18279999, 0.182, 0.18529999, 0.1894, 0.1786, 0.199, 0.18440001, 0.2201, 0.1723, 0.1961, 0.1798, 0.27169999, 0.233, 0.17389999, 0.27689999, 0.2199, 0.13689999, 0.215, 0.1135, 0.1135, 0.1103],
                   [0.1841, 0.1851, 0.18610001, 0.1867, 0.1762, 0.19, 0.192, 0.20209999, 0.19, 0.2025, 0.19679999, 0.1917, 0.18960001, 0.1918, 0.192, 0.2054, 0.2023, 0.2068, 0.2202, 0.2077, 0.18719999, 0.18359999, 0.20200001, 0.1163, 0.1141, 0.1082]])

pgdm_acc_6 = np.array([[0.0132, 0.0141, 0.0155, 0.0152, 0.0156, 0.0189, 0.0172, 0.0212, 0.0198, 0.0286, 0.0268, 0.0478, 0.0425, 0.035, 0.0396, 0.0509, 0.0456, 0.0615, 0.1228, 0.0722, 0.0804, 0.0913, 0.1138, 0.0969, 0.1135, 0.1135],
                   [0.0183, 0.0185, 0.0196, 0.0194, 0.0216, 0.0244, 0.0217, 0.0297, 0.0305, 0.0332, 0.0329, 0.0297, 0.0357, 0.0419, 0.0739, 0.0401, 0.0472, 0.0713, 0.114, 0.0569, 0.1204, 0.1549, 0.1292, 0.13600001, 0.1135, 0.1388],
                   [0.0189, 0.0193, 0.0224, 0.0209, 0.0228, 0.0189, 0.0297, 0.028, 0.0332, 0.0268, 0.0256, 0.0294, 0.0376, 0.0476, 0.0398, 0.0454, 0.0505, 0.0569, 0.1322, 0.1322, 0.1137, 0.0758, 0.1198, 0.0831, 0.1135, 0.1296],
                   [0.0161, 0.0176, 0.0179, 0.019, 0.0189, 0.0208, 0.0205, 0.0224, 0.0266, 0.0238, 0.0363, 0.0216, 0.0316, 0.0222, 0.0411, 0.0277, 0.0676, 0.046, 0.0406, 0.1252, 0.1237, 0.1143, 0.1591, 0.1135, 0.1135, 0.0814],
                   [0.0149, 0.0151, 0.0165, 0.0155, 0.018, 0.0172, 0.0211, 0.0176, 0.0216, 0.0238, 0.0261, 0.0286, 0.0285, 0.0272, 0.028, 0.0442, 0.0489, 0.0497, 0.0482, 0.0775, 0.1202, 0.1201, 0.1046, 0.1136, 0.1135, 0.1016]])

clean_acc_6 = np.array([[0.99, 0.9896, 0.9896, 0.99, 0.9895, 0.9883, 0.986, 0.9884, 0.9856, 0.9852, 0.9837, 0.9769, 0.9553, 0.9412, 0.9372, 0.8715, 0.9376, 0.9026, 0.8134, 0.7775, 0.69, 0.6491, 0.1337, 0.3259, 0.1135, 0.1135],
                   [0.9882, 0.9869, 0.9859, 0.9864, 0.9853, 0.9835, 0.9812, 0.9796, 0.9792, 0.9716, 0.9715, 0.9492, 0.9685, 0.9433, 0.8704, 0.9264, 0.9263, 0.7447, 0.6803, 0.9016, 0.3138, 0.3612, 0.4338, 0.2986, 0.1135, 0.2194],
                   [0.9902, 0.99, 0.9897, 0.9887, 0.9886, 0.9877, 0.9857, 0.9859, 0.9837, 0.9734, 0.9813, 0.9769, 0.9786, 0.8785, 0.9578, 0.9291, 0.8143, 0.9177, 0.8014, 0.5645, 0.4192, 0.5914, 0.4889, 0.2235, 0.1135, 0.1685],
                   [0.9893, 0.9892, 0.9893, 0.9891, 0.988, 0.9872, 0.9865, 0.9841, 0.9858, 0.9788, 0.9798, 0.9774, 0.9607, 0.9692, 0.9458, 0.9323, 0.9162, 0.9416, 0.7065, 0.7277, 0.3942, 0.2001, 0.4665, 0.1135, 0.1135, 0.1427],
                   [0.9888, 0.9886, 0.9894, 0.9892, 0.9882, 0.9866, 0.9883, 0.9873, 0.9823, 0.9851, 0.9783, 0.979, 0.9755, 0.9751, 0.9712, 0.9486, 0.8983, 0.8996, 0.8722, 0.8334, 0.2991, 0.4267, 0.5334, 0.1232, 0.1139, 0.1854]])

# Calculate the column-wise mean using np.mean with axis=0
fgsm_mean_6 = np.mean(fgsm_acc_6, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
fgsm_std_dev_6 = np.std(fgsm_acc_6, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
pgdm_mean_6 = np.mean(pgdm_acc_6, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
pgdm_std_dev_6 = np.std(pgdm_acc_6, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
clean_mean_6 = np.mean(clean_acc_6, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
clean_std_dev_6 = np.std(clean_acc_6, axis=0)

x = np.arange(start=0, stop=52, step=2)
print(x)
epsilon_6 = 0.21568627450980393
# Plot mean and standard deviation as error bars
#plt.errorbar(x, clean_mean_6, yerr=clean_std_dev_6, label='Clean')
#plt.errorbar(x, fgsm_mean_6, yerr=fgsm_std_dev_6, label='FGSM')
#plt.errorbar(x, pgdm_mean_6, yerr=pgdm_std_dev_6, label='PGDM')
#plt.title('Mean and Standard Deviation of Test Accuracy (epsilon = {:.4f})'.format(epsilon_6))
#plt.xlabel('Percentage of Weights modified')
#plt.ylabel('Accuracy')
#plt.grid(True)
#plt.legend()
#plt.show()

#######################

fgsm_acc_7 = [[0.0829, 0.0819, 0.0832, 0.0808, 0.0883, 0.0873, 0.0756, 0.0885, 0.082, 0.0829, 0.0805, 0.1067, 0.106, 0.0861, 0.1008, 0.1196, 0.12530001, 0.1498, 0.1199, 0.155, 0.1157, 0.14929999, 0.0911, 0.1147, 0.1136, 0.1135],
          [0.0988, 0.0973, 0.0945, 0.1002, 0.1072, 0.0989, 0.1058, 0.1081, 0.1148, 0.116, 0.1145, 0.1082, 0.1145, 0.1171, 0.1167, 0.1243, 0.1512, 0.1195, 0.116, 0.1485, 0.149, 0.1355, 0.1149, 0.1451, 0.1135, 0.1143],
          [0.0592, 0.062, 0.0715, 0.0668, 0.072, 0.0721, 0.0801, 0.0683, 0.098, 0.0584, 0.0676, 0.0891, 0.0941, 0.1156, 0.0957, 0.0994, 0.1032, 0.1388, 0.12909999, 0.1469, 0.14229999, 0.1144, 0.1216, 0.1135, 0.1135, 0.1454],
          [0.0769, 0.0816, 0.087, 0.08, 0.0858, 0.0898, 0.0734, 0.0907, 0.0889, 0.0904, 0.0973, 0.0822, 0.1127, 0.1069, 0.1008, 0.1111, 0.1506, 0.1521, 0.1246, 0.1211, 0.1135, 0.1168, 0.1434, 0.1135, 0.1135, 0.1135],
          [0.068, 0.07, 0.0701, 0.0665, 0.0745, 0.0748, 0.071, 0.0868, 0.0894, 0.0858, 0.0949, 0.0965, 0.1214, 0.1078, 0.0908, 0.1304, 0.12819999, 0.14380001, 0.1222, 0.12729999, 0.1225, 0.1152, 0.1305, 0.12899999, 0.1135, 0.1353]]

pgdm_acc_7 = [[0.0091, 0.0091, 0.0091, 0.0092, 0.0091, 0.0092, 0.0094, 0.0094, 0.0093, 0.0091, 0.0096, 0.011, 0.0101, 0.0098, 0.0101, 0.013, 0.0208, 0.0293, 0.0311, 0.0602, 0.049, 0.1144, 0.0252, 0.1161, 0.1135, 0.1135],
          [0.0095, 0.0096, 0.0095, 0.0098, 0.0099, 0.011, 0.0106, 0.0102, 0.0132, 0.0119, 0.0128, 0.0109, 0.0188, 0.0123, 0.0141, 0.0165, 0.0178, 0.0205, 0.0204, 0.0367, 0.0386, 0.1134, 0.1133, 0.0453, 0.1135, 0.1135],
          [0.0093, 0.0093, 0.0094, 0.0092, 0.0093, 0.0092, 0.0092, 0.0093, 0.01, 0.0093, 0.0095, 0.0109, 0.0097, 0.0097, 0.0105, 0.0106, 0.022, 0.0447, 0.0432, 0.0314, 0.1104, 0.1135, 0.1135, 0.1135, 0.1135, 0.1183],
          [0.0091, 0.0092, 0.0094, 0.0092, 0.0094, 0.0099, 0.0095, 0.0094, 0.0096, 0.0097, 0.0105, 0.0108, 0.0111, 0.0106, 0.0122, 0.0137, 0.0179, 0.0394, 0.0324, 0.0252, 0.0514, 0.0781, 0.1085, 0.1135, 0.1135, 0.1135],
          [0.0088, 0.009, 0.009, 0.0089, 0.009, 0.0089, 0.009, 0.0091, 0.0103, 0.0101, 0.0096, 0.009, 0.0118, 0.0107, 0.0096, 0.0317, 0.0194, 0.0413, 0.0476, 0.0271, 0.1133, 0.1136, 0.0997, 0.0621, 0.1135, 0.1068]]

clean_acc_7 = [[0.98890001, 0.9892, 0.98830003, 0.98809999, 0.98470002, 0.98610002, 0.97930002, 0.97820002, 0.97790003, 0.97920001, 0.97839999, 0.94459999, 0.95480001, 0.9544, 0.9224, 0.91180003, 0.83219999, 0.74360001, 0.76499999, 0.71200001, 0.64349997, 0.2247, 0.63510001, 0.36849999, 0.1137, 0.1135],
          [0.98949999, 0.98930001, 0.98720002, 0.98940003, 0.98589998, 0.986, 0.98659998, 0.98390001, 0.97860003, 0.98269999, 0.97060001, 0.97920001, 0.97189999, 0.96039999, 0.95179999, 0.91180003, 0.94639999, 0.92540002, 0.838, 0.58329999, 0.7604, 0.40310001, 0.12639999, 0.38460001, 0.1135, 0.1216],
          [0.98940003, 0.98909998, 0.98860002, 0.98949999, 0.98519999, 0.98470002, 0.98650002, 0.98409998, 0.97719997, 0.97750002, 0.98250002, 0.96869999, 0.97070003, 0.9465, 0.93769997, 0.92460001, 0.8585, 0.83719999, 0.61140001, 0.63160002, 0.37380001, 0.1184, 0.1229, 0.1135, 0.1135, 0.19239999],
          [0.98909998, 0.9896, 0.98720002, 0.98790002, 0.9874, 0.98100001, 0.9835, 0.97860003, 0.98079997, 0.97790003, 0.97839999, 0.9325, 0.94489998, 0.90219998, 0.92580003, 0.8671, 0.88690001, 0.6972, 0.73839998, 0.60079998, 0.54100001, 0.58459997, 0.2886, 0.1135, 0.1135, 0.1135],
          [0.9903, 0.9896, 0.98879999, 0.98970002, 0.98879999, 0.98699999, 0.98339999, 0.98629999, 0.98460001, 0.98470002, 0.98009998, 0.97979999, 0.96390003, 0.96170002, 0.9612, 0.92510003, 0.9508, 0.8265, 0.76239997, 0.86369997, 0.1512, 0.1328, 0.29229999, 0.53070003, 0.1135, 0.28639999]]

# Calculate the column-wise mean using np.mean with axis=0
fgsm_mean_7 = np.mean(fgsm_acc_7, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
fgsm_std_dev_7 = np.std(fgsm_acc_7, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
pgdm_mean_7 = np.mean(pgdm_acc_7, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
pgdm_std_dev_7 = np.std(pgdm_acc_7, axis=0)

# Calculate the column-wise mean using np.mean with axis=0
clean_mean_7 = np.mean(clean_acc_7, axis=0)

# Calculate the column-wise standard deviation using np.std with axis=0
clean_std_dev_7 = np.std(clean_acc_7, axis=0)

x = np.arange(start=0, stop=52, step=2)
print(x)
epsilon_7 = 0.34901960784313724
# Plot mean and standard deviation as error bars
#plt.errorbar(x, clean_mean_7, yerr=clean_std_dev_7, label='Clean')
#plt.errorbar(x, fgsm_mean_7, yerr=fgsm_std_dev_7, label='FGSM')
#plt.errorbar(x, pgdm_mean_7, yerr=pgdm_std_dev_7, label='PGDM')
#plt.title('Mean and Standard Deviation of Test Accuracy (epsilon = {:.4f})'.format(epsilon_7))
#plt.xlabel('Percentage of Weights modified')
#plt.ylabel('Accuracy')
#plt.grid(True)
#plt.legend()
#plt.show()

#######################

#fgsm_acc_8 = 
#pgdm_acc_8 = 
#clean_acc_8 = 

## Calculate the column-wise mean using np.mean with axis=0
#fgsm_mean_8 = np.mean(fgsm_acc_8, axis=0)

## Calculate the column-wise standard deviation using np.std with axis=0
#fgsm_std_dev_8 = np.std(fgsm_acc_8, axis=0)

## Calculate the column-wise mean using np.mean with axis=0
#pgdm_mean_8 = np.mean(pgdm_acc_8, axis=0)

## Calculate the column-wise standard deviation using np.std with axis=0
#pgdm_std_dev_8 = np.std(pgdm_acc_8, axis=0)

## Calculate the column-wise mean using np.mean with axis=0
#clean_mean_8 = np.mean(clean_acc_8, axis=0)

## Calculate the column-wise standard deviation using np.std with axis=0
#clean_std_dev_8 = np.std(clean_acc_8, axis=0)

#x = np.arange(start=0, stop=52, step=2)
#print(x)
#epsilon_8 = 0.21568627450980393
## Plot mean and standard deviation as error bars
#plt.errorbar(x, clean_mean_8, yerr=clean_std_dev_8, label='Clean')
#plt.errorbar(x, fgsm_mean_8, yerr=fgsm_std_dev_8, label='FGSM')
#plt.errorbar(x, pgdm_mean_8, yerr=pgdm_std_dev_8, label='PGDM')
#plt.title('Mean and Standard Deviation of Test Accuracy (epsilon = {:.4f})'.format(epsilon_8))
#plt.xlabel('Percentage of Weights modified')
#plt.ylabel('Accuracy')
#plt.grid(True)
#plt.legend()
#plt.show()

########################

#fgsm_acc_6 = np.array([[0.1874, 0.18539999, 0.1937, 0.1865, 0.19320001, 0.1865, 0.1944, 0.1961, 0.1978, 0.1926, 0.20110001, 0.20110001, 0.2045, 0.2378, 0.2049, 0.21520001, 0.19140001, 0.2113, 0.25139999, 0.21160001, 0.20999999, 0.21080001, 0.12970001, 0.18089999, 0.1135, 0.1135],
#                   [0.184, 0.18610001, 0.18269999, 0.1816, 0.18269999, 0.1877, 0.1893, 0.2022, 0.1881, 0.191, 0.1714, 0.1763, 0.1717, 0.18000001, 0.20110001, 0.1758, 0.2096, 0.23270001, 0.20829999, 0.2471, 0.177, 0.2035, 0.1408, 0.163, 0.1135, 0.156],
#                   [0.19769999, 0.2, 0.2061, 0.2049, 0.21439999, 0.1901, 0.2071, 0.2042, 0.227, 0.21080001, 0.20389999, 0.2141, 0.24339999, 0.2342, 0.25870001, 0.28349999, 0.1715, 0.26199999, 0.30379999, 0.2454, 0.22660001, 0.1785, 0.2006, 0.1221, 0.1135, 0.15279999],
#                   [0.1825, 0.1804, 0.1847, 0.18960001, 0.18880001, 0.18279999, 0.182, 0.18529999, 0.1894, 0.1786, 0.199, 0.18440001, 0.2201, 0.1723, 0.1961, 0.1798, 0.27169999, 0.233, 0.17389999, 0.27689999, 0.2199, 0.13689999, 0.215, 0.1135, 0.1135, 0.1103],
#                   [0.1841, 0.1851, 0.18610001, 0.1867, 0.1762, 0.19, 0.192, 0.20209999, 0.19, 0.2025, 0.19679999, 0.1917, 0.18960001, 0.1918, 0.192, 0.2054, 0.2023, 0.2068, 0.2202, 0.2077, 0.18719999, 0.18359999, 0.20200001, 0.1163, 0.1141, 0.1082]])

#pgdm_acc_6 = np.array([[0.0132, 0.0141, 0.0155, 0.0152, 0.0156, 0.0189, 0.0172, 0.0212, 0.0198, 0.0286, 0.0268, 0.0478, 0.0425, 0.035, 0.0396, 0.0509, 0.0456, 0.0615, 0.1228, 0.0722, 0.0804, 0.0913, 0.1138, 0.0969, 0.1135, 0.1135],
#                   [0.0183, 0.0185, 0.0196, 0.0194, 0.0216, 0.0244, 0.0217, 0.0297, 0.0305, 0.0332, 0.0329, 0.0297, 0.0357, 0.0419, 0.0739, 0.0401, 0.0472, 0.0713, 0.114, 0.0569, 0.1204, 0.1549, 0.1292, 0.13600001, 0.1135, 0.1388],
#                   [0.0189, 0.0193, 0.0224, 0.0209, 0.0228, 0.0189, 0.0297, 0.028, 0.0332, 0.0268, 0.0256, 0.0294, 0.0376, 0.0476, 0.0398, 0.0454, 0.0505, 0.0569, 0.1322, 0.1322, 0.1137, 0.0758, 0.1198, 0.0831, 0.1135, 0.1296],
#                   [0.0161, 0.0176, 0.0179, 0.019, 0.0189, 0.0208, 0.0205, 0.0224, 0.0266, 0.0238, 0.0363, 0.0216, 0.0316, 0.0222, 0.0411, 0.0277, 0.0676, 0.046, 0.0406, 0.1252, 0.1237, 0.1143, 0.1591, 0.1135, 0.1135, 0.0814],
#                   [0.0149, 0.0151, 0.0165, 0.0155, 0.018, 0.0172, 0.0211, 0.0176, 0.0216, 0.0238, 0.0261, 0.0286, 0.0285, 0.0272, 0.028, 0.0442, 0.0489, 0.0497, 0.0482, 0.0775, 0.1202, 0.1201, 0.1046, 0.1136, 0.1135, 0.1016]])

#clean_acc_6 = np.array([[0.99, 0.9896, 0.9896, 0.99, 0.9895, 0.9883, 0.986, 0.9884, 0.9856, 0.9852, 0.9837, 0.9769, 0.9553, 0.9412, 0.9372, 0.8715, 0.9376, 0.9026, 0.8134, 0.7775, 0.69, 0.6491, 0.1337, 0.3259, 0.1135, 0.1135],
#                   [0.9882, 0.9869, 0.9859, 0.9864, 0.9853, 0.9835, 0.9812, 0.9796, 0.9792, 0.9716, 0.9715, 0.9492, 0.9685, 0.9433, 0.8704, 0.9264, 0.9263, 0.7447, 0.6803, 0.9016, 0.3138, 0.3612, 0.4338, 0.2986, 0.1135, 0.2194],
#                   [0.9902, 0.99, 0.9897, 0.9887, 0.9886, 0.9877, 0.9857, 0.9859, 0.9837, 0.9734, 0.9813, 0.9769, 0.9786, 0.8785, 0.9578, 0.9291, 0.8143, 0.9177, 0.8014, 0.5645, 0.4192, 0.5914, 0.4889, 0.2235, 0.1135, 0.1685],
#                   [0.9893, 0.9892, 0.9893, 0.9891, 0.988, 0.9872, 0.9865, 0.9841, 0.9858, 0.9788, 0.9798, 0.9774, 0.9607, 0.9692, 0.9458, 0.9323, 0.9162, 0.9416, 0.7065, 0.7277, 0.3942, 0.2001, 0.4665, 0.1135, 0.1135, 0.1427],
#                   [0.9888, 0.9886, 0.9894, 0.9892, 0.9882, 0.9866, 0.9883, 0.9873, 0.9823, 0.9851, 0.9783, 0.979, 0.9755, 0.9751, 0.9712, 0.9486, 0.8983, 0.8996, 0.8722, 0.8334, 0.2991, 0.4267, 0.5334, 0.1232, 0.1139, 0.1854]])

## Calculate the column-wise mean using np.mean with axis=0
#fgsm_mean_6 = np.mean(fgsm_acc_6, axis=0)

## Calculate the column-wise standard deviation using np.std with axis=0
#fgsm_std_dev_6 = np.std(fgsm_acc_6, axis=0)

## Calculate the column-wise mean using np.mean with axis=0
#pgdm_mean_6 = np.mean(pgdm_acc_6, axis=0)

## Calculate the column-wise standard deviation using np.std with axis=0
#pgdm_std_dev_6 = np.std(pgdm_acc_6, axis=0)

## Calculate the column-wise mean using np.mean with axis=0
#clean_mean_6 = np.mean(clean_acc_6, axis=0)

## Calculate the column-wise standard deviation using np.std with axis=0
#clean_std_dev_6 = np.std(clean_acc_6, axis=0)

#x = np.arange(start=0, stop=52, step=2)
#print(x)
#epsilon_6 = 0.21568627450980393
## Plot mean and standard deviation as error bars
#plt.errorbar(x, clean_mean_6, yerr=clean_std_dev_6, label='Clean')
#plt.errorbar(x, fgsm_mean_6, yerr=fgsm_std_dev_6, label='FGSM')
#plt.errorbar(x, pgdm_mean_6, yerr=pgdm_std_dev_6, label='PGDM')
#plt.title('Mean and Standard Deviation of Test Accuracy (epsilon = {:.4f})'.format(epsilon_6))
#plt.xlabel('Percentage of Weights modified')
#plt.ylabel('Accuracy')
#plt.grid(True)
#plt.legend()
#plt.show()

#plt.errorbar(x, clean_mean_1, yerr=clean_std_dev_1, label='Clean')
#plt.errorbar(x, fgsm_mean_1, yerr=fgsm_std_dev_1, label='(epsilon = {:.4f})'.format(epsilon_1))
#plt.errorbar(x, fgsm_mean_2, yerr=fgsm_std_dev_2, label='(epsilon = {:.4f})'.format(epsilon_2))
#plt.errorbar(x, fgsm_mean_3, yerr=fgsm_std_dev_3, label='(epsilon = {:.4f})'.format(epsilon_3))
#plt.errorbar(x, fgsm_mean_4, yerr=fgsm_std_dev_4, label='(epsilon = {:.4f})'.format(epsilon_4))
#plt.errorbar(x, fgsm_mean_5, yerr=fgsm_std_dev_5, label='(epsilon = {:.4f})'.format(epsilon_5))
#plt.errorbar(x, fgsm_mean_6, yerr=fgsm_std_dev_6, label='(epsilon = {:.4f})'.format(epsilon_6))
#plt.errorbar(x, fgsm_mean_7, yerr=fgsm_std_dev_7, label='(epsilon = {:.4f})'.format(epsilon_7))
#plt.title('Mean and Standard Deviation of Test Accuracy for Epsilon Values: 5/255, 8/255, 13/255, 21/255, 34/255, 55/255, 89/255')
#plt.xlabel('Percentage of Weights modified')
#plt.ylabel('Accuracy')
#plt.grid(True)
#plt.legend()
#plt.show()

#plt.errorbar(x, clean_mean_1, label='Clean')
#plt.errorbar(x, fgsm_mean_1, label='(epsilon = {:.4f})'.format(epsilon_1))
#plt.errorbar(x, fgsm_mean_2, label='(epsilon = {:.4f})'.format(epsilon_2))
#plt.errorbar(x, fgsm_mean_3, label='(epsilon = {:.4f})'.format(epsilon_3))
#plt.errorbar(x, fgsm_mean_4, label='(epsilon = {:.4f})'.format(epsilon_4))
#plt.errorbar(x, fgsm_mean_5, label='(epsilon = {:.4f})'.format(epsilon_5))
#plt.errorbar(x, fgsm_mean_6, label='(epsilon = {:.4f})'.format(epsilon_6))
#plt.errorbar(x, fgsm_mean_7, label='(epsilon = {:.4f})'.format(epsilon_7))
#plt.title('Mean of Test Accuracy for Epsilon Values: 5/255, 8/255, 13/255, 21/255, 34/255, 55/255, 89/255')
#plt.xlabel('Percentage of Weights modified')
#plt.ylabel('Accuracy')
#plt.grid(True)
#plt.legend()
#plt.show()

total_clean_acc = []

total_clean_acc.append(clean_acc_1)
total_clean_acc.append(clean_acc_2)
total_clean_acc.append(clean_acc_3)
total_clean_acc.append(clean_acc_4)
total_clean_acc.append(clean_acc_5)
total_clean_acc.append(clean_acc_6)
total_clean_acc.append(clean_acc_7)
#print(total_clean_acc)


#plt.errorbar(x, np.mean(total_clean_acc, axis=0), yerr=np.std(total_clean_acc, axis=0), label='Clean')
print(np.mean(total_clean_acc, axis=0))
print(np.std(total_clean_acc, axis=0))
#plt.errorbar(x, pgdm_mean_1, yerr=pgdm_std_dev_1, label='(epsilon = {:.4f})'.format(epsilon_1))
#plt.errorbar(x, pgdm_mean_2, yerr=pgdm_std_dev_2, label='(epsilon = {:.4f})'.format(epsilon_2))
#plt.errorbar(x, pgdm_mean_3, yerr=pgdm_std_dev_3, label='(epsilon = {:.4f})'.format(epsilon_3))
#plt.errorbar(x, pgdm_mean_4, yerr=pgdm_std_dev_4, label='(epsilon = {:.4f})'.format(epsilon_4))
#plt.errorbar(x, pgdm_mean_5, yerr=pgdm_std_dev_5, label='(epsilon = {:.4f})'.format(epsilon_5))
#plt.errorbar(x, pgdm_mean_6, yerr=pgdm_std_dev_6, label='(epsilon = {:.4f})'.format(epsilon_6))
#plt.errorbar(x, pgdm_mean_7, yerr=pgdm_std_dev_7, label='(epsilon = {:.4f})'.format(epsilon_7))
#plt.title('Mean and Standard Deviation of Test Accuracy for Epsilon Values: 5/255, 8/255, 13/255, 21/255, 34/255, 55/255, 89/255')
#plt.xlabel('Percentage of Weights modified')
#plt.ylabel('Accuracy')
#plt.grid(True)
#plt.legend()
#plt.show()